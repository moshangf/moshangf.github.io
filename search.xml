<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git命令</title>
      <link href="/2022/12/22/git%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/12/22/git%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="left">git命令</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td align="left">git inin</td><td>初始化文件夹为Git仓库</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666010406373.png" alt="1666010406373"></td></tr><tr><td align="left">git status</td><td>查看仓库状态</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666010515605.png" alt="1666010515605"></td></tr><tr><td align="left">git add 文件名</td><td>将指定文件添加到暂存区</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666010588076.png" alt="1666010588076"></td></tr><tr><td align="left">git  add .</td><td>将所有文件添加到暂存区</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666010624230.png" alt="1666010624230"></td></tr><tr><td align="left">git rm –cached 文件名</td><td>将指定文件从暂存区删除</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666010730890.png" alt="1666010730890"></td></tr><tr><td align="left">git reset</td><td>清空暂存区文件</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666010763228.png" alt="1666010763228"></td></tr><tr><td align="left">git commit -m “提交说明(备注)” 文件名</td><td>从暂存区提交到本地库</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666010792934.png" alt="1666010792934"></td></tr><tr><td align="left">git ls-files</td><td>查看提交到本地库的文件</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666012727775.png" alt="1666012727775"></td></tr><tr><td align="left">git reflog</td><td>查看本地库版本</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666010810917.png" alt="1666010810917"></td></tr><tr><td align="left">git log</td><td>查看详细日志</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666010823710.png" alt="1666010823710"></td></tr><tr><td align="left">ll</td><td>查看当前文件列表</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666011175771.png" alt="1666011175771"></td></tr><tr><td align="left">cat 文件名</td><td>查看文件内容</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666011154071.png" alt="1666011154071"></td></tr><tr><td align="left">git reset –hard 版本号</td><td>切换版本</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666012340717.png" alt="1666012340717"></td></tr><tr><td align="left">git branch -v</td><td>查看分支</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666052229498.png" alt="1666052229498"></td></tr><tr><td align="left">git branch 分支名</td><td>创建分支</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666052322830.png" alt="1666052322830"></td></tr><tr><td align="left">git checkout 分支名</td><td>切换分支</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666052481059.png" alt="1666052481059"></td></tr><tr><td align="left">git merge 分支名</td><td>将目标分支合并到当前所在分支上</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666053757478.png" alt="1666053757478"></td></tr><tr><td align="left">git remote add 远程仓库地址</td><td>为远程仓库地址创建别名</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666059316517.png" alt="1666059316517"></td></tr><tr><td align="left">git remote -v</td><td>查看已创建的别名</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666059347199.png" alt="1666059347199"></td></tr><tr><td align="left">git push 地址/别名 分支名</td><td>推送本地库代码到远程库</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666059547608.png" alt="1666059547608"></td></tr><tr><td align="left">git pull 地址/别名 分支名</td><td>拉取远程库代码到本地库</td><td><img src="C:\Users\17452\AppData\Roaming\Typora\typora-user-images\1666059995794.png" alt="1666059995794"></td></tr><tr><td align="left">git clone 远程库地址</td><td>克隆远程仓库到本地</td><td></td></tr><tr><td align="left"></td><td></td><td></td></tr><tr><td align="left"></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis学习笔记（黑马点评）</title>
      <link href="/2022/12/22/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/12/22/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="Redis与数据库的数据一致性："><a href="#Redis与数据库的数据一致性：" class="headerlink" title="Redis与数据库的数据一致性："></a>Redis与数据库的数据一致性：</h4><ol><li>设置缓存过期时间；</li><li>先更新数据库再删除缓存</li></ol><h4 id="缓存穿透："><a href="#缓存穿透：" class="headerlink" title="缓存穿透："></a>缓存穿透：</h4><p>请求的数据在Redis和数据库中都不存在。</p><p><strong>解决方案：</strong></p><ol><li>布隆过滤器（内存占用少，实现复杂，有误判的可能性）。</li><li>数据库中没有的数据，在redis中存入一个对应key，内容为空值（有额外内存消耗，有短期内数据不一致问题，实现简单）。</li></ol><h4 id="缓存击穿："><a href="#缓存击穿：" class="headerlink" title="缓存击穿："></a>缓存击穿：</h4><p>对于热点key，失效后引发的大量请求直接访问数据库的问题。</p><p><strong>解决方案</strong></p><ol><li><p>互斥锁：</p><p>线程1查询数据发现redis没有后，对于该查询key获取互斥锁（实际上是对于该key使用redis的setnx方法先写入一个随意值，这样其它线程就不能修改此key的内容了），进行查询数据库重建缓存的操作；此时其它对于该key的线程，访问请求都会进行等待，待线程1重建缓存并释放锁之后，即可查询到缓存。</p></li><li><p>逻辑过期：</p><p>给缓存key设定一个过期时间，当线程1查询数据发现超过这个时间后，获取互斥锁启动线程2去进行查询数据库及更新缓存的操作，线程1以及其它线程在此期间内返回的是过期数据。</p></li></ol><h4 id="缓存雪崩："><a href="#缓存雪崩：" class="headerlink" title="缓存雪崩："></a>缓存雪崩：</h4><p>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p><strong>解决方案：</strong></p><ol><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ol><h4 id="全局唯一ID："><a href="#全局唯一ID：" class="headerlink" title="全局唯一ID："></a>全局唯一ID：</h4><p>用途：在将会产生大量数据的情况下，生成没有规律的唯一性id，常用于生成订单等</p><p>特性：唯一性、递增性、安全性、高可用、高性能</p><h5 id="生成方案："><a href="#生成方案：" class="headerlink" title="生成方案："></a>生成方案：</h5><ol><li><p>UUID：JDK自带UUID工具类生成，生成为16进制字符串格式</p></li><li><p>雪花算法：使用机器id进行自增，对时钟依赖性较高</p></li><li><p>Redis自增：满足所需求的各种特性和单调递增，生成为数字类型</p></li></ol><h4 id="超卖问题："><a href="#超卖问题：" class="headerlink" title="超卖问题："></a>超卖问题：</h4><p>例：大量并发请求下库存扣减为负值</p><h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h5><ol><li>悲观锁：使用同步锁让线程串行执行<ul><li>优点：简单粗暴</li><li>缺点：性能一般</li></ul></li><li>乐观锁：根据在修改数据时的数据变化判断有没有其它线程在修改<ul><li>优点：性能好</li><li>缺点：基于数据变更判断，只要是判断数据有更改或正进行更改就不会进行扣减的动作，容易误判（可优化为以库存大于0为判断依据）</li></ul></li></ol><h4 id="分布式锁："><a href="#分布式锁：" class="headerlink" title="分布式锁："></a>分布式锁：</h4><p>满足分布式系统或集群模式下多进程可见并且互斥的锁</p><p><img src="D:\notebook\笔记图片\分布式锁.png" alt="分布式锁"></p><h5 id="基于Redis创建锁对象-："><a href="#基于Redis创建锁对象-：" class="headerlink" title="基于Redis创建锁对象 ："></a><strong>基于Redis创建锁对象 ：</strong></h5><h6 id="阶段一："><a href="#阶段一：" class="headerlink" title="阶段一："></a><strong>阶段一：</strong></h6><p>​    在集群模式下，有多台tomcat，当一个线程过来下单时，必须通过setnx向redis中写一个临时数据，此过程为“上锁”，通过userid作为唯一key，当这个用户并发下单时因为setnx“锁“的存在，无法再新建key，就无法继续后续步骤，此时可以返回错误消息，由此保证一人一单。</p><p><strong>存在问题：</strong></p><p>​    线程1当因业务阻塞等原因导致锁超时释放后，其它线程会获得锁，而后开始进行业务，之后线程1走删除锁流程后，其它线程即可都进行业务了；</p><blockquote><p><img src="D:\notebook\笔记图片\1670462564537.png" alt="1670462564537"></p></blockquote><h6 id="阶段二："><a href="#阶段二：" class="headerlink" title="阶段二："></a>阶段二：</h6><p>​    获取锁时以UUID+线程标识为value，当首先获得”锁“的线程释放锁时，会根据获得锁时存入key中的UUID和线程id进行判断，是否为自己的锁，不是自己的锁不释放，若为自己的锁则进行释放。</p><p><strong>存在问题：</strong></p><p>​    在判断锁标识是否为自己的时候到释放锁中间可能会产生阻塞导致锁超时，再次产生误删锁的问题</p><blockquote><p><img src="D:\notebook\笔记图片\1670464459308.png" alt="1670464459308"></p></blockquote><h6 id="阶段三："><a href="#阶段三：" class="headerlink" title="阶段三："></a>阶段三：</h6><p><strong>使用Lua脚本：</strong></p><p>​    Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><p><strong>Java实现：</strong></p><p>​    使用RedisTemplate的execute方法调用lua脚本，判断锁是否为自己和释放锁都写入到lua脚本中，满足原子性。</p><h6 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h6><p><strong>业务超时导致锁释放期间的流程是什么?</strong></p><p>​    由其它线程获取锁执行业务，最终都是下单，区别在于是谁干的活儿，但因为userld作为redis的key，最终结果还是只下一单，若此时线程A受阻结束会继续执行下单业务，但是会判断是否已有订单(根据用户id判断)。</p><p>​    总之，在线程A释放锁期间，还是只会有一个线程拿到锁进行业务，期间若是它也超时，又有另一线程获取锁进行业务，这几个获取到锁的线程因为判断是否已产生订单逻辑的存在，最终只会有一个线程的业务是有效的，只产生一个订单。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/20/hello-world/"/>
      <url>/2022/12/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
